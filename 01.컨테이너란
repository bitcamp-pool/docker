학습목표 : 애플리케이션을 컨테이너로 만들어 사용하기(컨테이너 기반 app운영)

컨테이너란?

1. 왜 컨테이너를 배워야하지?
    - 한정된 자원, 거대한 플랫폼(대용량)
    - 가상화 플랫폼 : 가상 컴퓨터를 만들어 필요한 어플리케이션을 올려 사용
    - 서비스 중단 없이 어플리케이션을 운용해야하는 환경
    - OS에 Container Engin을 올려 사용(docker) : 독립된 공간 안에서 적은 용량으로 어플리케이션 실행
    - 확장성 및 배포 용이
    - 소프트웨어의 컨테이너 의미 : APP동작 환경 

2. 왜 굳이 리눅스에서 돌리지?
    - 리눅스 커널(kernel)의 기능을 가지고 만들어짐
        chroot : 독립된 공간 형성
        namespace : isolate 기능 지원
        cgroup : 필요한 만큼의 HW 지원
    - 윈도우/Mac : Hypervisor(가상 머신(Virtual Machine, VM)을 생성하고 구동하는 소프트웨어)
                   기능 활성화(리눅스 기능 서포트)

3. 그냥 프로그램과 컨테이너의 차이는?
    - 소스파일
        # cat app.js
        const http = require('http');
        const os = require('os');
        console.log("Test server starting...");
        var handler = function(req, res) {
            res.writeHead(200);
            res.end("Container Hostname:" + os.hostname() + "\n");
        };

    - 일반적인 실행방법
        var www = http.createServer(handler);
        www.listen(8080);
        [실행환경]
        node.js 설치
        # node app.js

    - 컨테이너 기반 실행(컨테이너 안에 node 환경만들고 app 동작)
        # cat Dockerfile
        FROM node:12 
        COPY app.js /app.js
        ENTRYPOINT ["node", "app.js"]

4. 그래서 도커 왜 쓰나?
    - 하는 용도는 같은데...
    - 개발자가 만든 그대로 어디서든 돌아가!
    - 확장/축소가 쉽고 MSA(Micro Service Architecture), 
      Devops(개발(Development)과 운영(Operations)의 합성어)환경에 적합!
      : 고객의 요구를 빠르게 반영 처리
    - 개발자는 컨테이너 구조로 개발 -> 고객사에 제공(운용 플랫폼 환경 구성의 번거로움 제거)
      : (운용환경 + APP)를 패키지화                개발환경과 운용환경 일치
    - 확장(Scale Out)시 OS등 자원 오버헤드 문제 발생 [node/app(100M) +  os(1G)] * n 개 
      : 컨테이너(node, app.js) 추가 [node/app(100M)] * n 개
        독립적으로 실행

